global
    log stdout format raw local0

defaults
    log global
    option httplog
    option forwardfor if-none
    mode http
    timeout connect 10s
    timeout client "${CLIENT_TIMEOUT}"
    timeout server "${SERVER_TIMEOUT}"

frontend http_front
    bind *:8080
    default_backend http_back
    http-request set-header Host %[req.hdr(Host),lower]
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request add-header Forwarded by=%[dst]:%[dst_port];for=%[src]:%[src_port];host=%[req.hdr(Host)];proto=%[req.hdr(X-Forwarded-Proto)]

backend http_back
    balance leastconn
    option httpchk
    http-check connect ssl sni localhost
    http-check send meth GET ver "HTTP/1.1" uri "${BACKEND_CHECK_URI}" hdr Host localhost hdr User-Agent "${BACKEND_CHECK_USER_AGENT}" hdr Authorization "Basic ${BACKEND_CHECK_BASIC_AUTH}"
    http-check expect status 200
    default-server ssl ca-file "${BACKEND_CA_BUNDLE}" check inter "${BACKEND_CHECK_INTER}" fall "${BACKEND_CHECK_FALL}" rise "${BACKEND_CHECK_RISE}" resolvers docker_resolver resolve-prefer ipv4
    server backend1 "${BACKEND1_HOST}:${BACKEND1_PORT}"
    server backend2 "${BACKEND2_HOST}:${BACKEND2_PORT}"

resolvers docker_resolver
    nameserver dns 127.0.0.11:53
    hold valid 2s
